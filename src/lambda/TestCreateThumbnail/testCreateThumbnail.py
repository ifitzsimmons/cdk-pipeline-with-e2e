from time import sleep
import boto3
import botocore
import json
import logging
import os

from datetime import datetime as dt

logger = logging.getLogger()
logger.setLevel(logging.INFO)
s3 = boto3.client('s3')

SUPPORTED_IMG_TYPES = ['jpg', 'jpeg', 'png']
DESTINATION_BUCKET = os.environ['DestinationBucket']
TEST_ARTIFACT_BUCKET = os.environ['TestArtifactBucket']
SOURCE_BUCKET = os.environ['SourceBucket']

EXPECTED_THUMBNAIL_SIZE = 145E3

def assert_image_expected_size(image_size: int):
  ''' The thumbnail generated by this test should be about 145 KB.
  This function asserts that the generated thumbnail is within 10 KB
  of the expected size

  Args:
    image_size: Image Size in Bytes
  '''
  difference = abs(image_size - EXPECTED_THUMBNAIL_SIZE)
  assertion = f'Expected thumbnail size to be within 10KB of {EXPECTED_THUMBNAIL_SIZE}' \
    f'Bytes but received image of size {image_size // 1000} KB'

  assert difference <= 10E3, assertion

def assert_original_image_deleted(error_code, error_message):
  '''Asserts that the original image is no longer in the ingestion bucket
  '''
  assert error_code == '404', 'Original Image did not return "Not Found" exception'
  assert error_message == 'Not Found', 'Original Image did not return "Not Found" exception'

def test_image_resized(key_name) -> None:
  while True:
    try:
      object_data = s3.head_object(Bucket=DESTINATION_BUCKET, Key=key_name)
      logger.info('Found thumbnail in Destination Bucket')
    except botocore.exceptions.ClientError as ex:
      error = ex.response['Error']
      if error['Code'] != '404' and error['Message'] != 'Not Found':
        raise ex
      logger.info('Thumnbail not yet in destination Bucket')

      continue

    if object_data:
      assert_image_expected_size(object_data['ContentLength'])
      logger.info('Thumbnail is expected size')

      try:
        s3.head_object(Bucket=SOURCE_BUCKET, Key=key_name)
        raise Exception('Source Image not deleted')
      except botocore.exceptions.ClientError as ex:
        error = ex.response['Error']
        assert_original_image_deleted(error.get('Code'), error.get('Message'))
        logger.info('Original image deleted from ingestion bucket')
        return

    sleep(30)

def lambda_handler(event, context):
  logger.info('EVENT:')
  logger.info(json.dumps(event, indent=4, sort_keys=True))
  timestamp = int(dt.now().timestamp())
  key_name = f'test/{timestamp}.jpeg'
  destination_key_name = f'test/{timestamp}-thumbnail.jpeg'

  s3.copy_object(
    Bucket=SOURCE_BUCKET,
    Key=key_name,
    CopySource=f'{TEST_ARTIFACT_BUCKET}/replaceme.jpeg'
  )
  logger.info('Copied artifact to ingestion bucket')

  test_image_resized(destination_key_name)

  return 'Success'
